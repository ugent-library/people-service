// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO people (
  active,
  name,
  preferred_name,
  given_name,
  family_name,
  preferred_given_name,
  preferred_family_name,
  honorific_prefix,
  email
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreatePersonParams struct {
	Active              bool
	Name                string
	PreferredName       pgtype.Text
	GivenName           pgtype.Text
	FamilyName          pgtype.Text
	PreferredGivenName  pgtype.Text
	PreferredFamilyName pgtype.Text
	HonorificPrefix     pgtype.Text
	Email               pgtype.Text
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (int64, error) {
	row := q.db.QueryRow(ctx, createPerson,
		arg.Active,
		arg.Name,
		arg.PreferredName,
		arg.GivenName,
		arg.FamilyName,
		arg.PreferredGivenName,
		arg.PreferredFamilyName,
		arg.HonorificPrefix,
		arg.Email,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createPersonIdentifier = `-- name: CreatePersonIdentifier :exec
INSERT INTO people_identifiers (
  person_id,
  type,
  value
) VALUES ($1, $2, $3)
`

type CreatePersonIdentifierParams struct {
	PersonID int64
	Type     string
	Value    string
}

func (q *Queries) CreatePersonIdentifier(ctx context.Context, arg CreatePersonIdentifierParams) error {
	_, err := q.db.Exec(ctx, createPersonIdentifier, arg.PersonID, arg.Type, arg.Value)
	return err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM people
WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePerson, id)
	return err
}

const deletePersonIdentifier = `-- name: DeletePersonIdentifier :exec
DELETE FROM people_identifiers
WHERE type = $1 AND value = $2
`

type DeletePersonIdentifierParams struct {
	Type  string
	Value string
}

func (q *Queries) DeletePersonIdentifier(ctx context.Context, arg DeletePersonIdentifierParams) error {
	_, err := q.db.Exec(ctx, deletePersonIdentifier, arg.Type, arg.Value)
	return err
}

const getPersonByIdentifier = `-- name: GetPersonByIdentifier :one
WITH identifiers AS (
  SELECT i1.person_id, i1.type, i1.value
  FROM people_identifiers i1
  LEFT JOIN  people_identifiers i2 ON i1.person_id = i2.person_id
  WHERE i2.type = $1 AND i2.value = $2	
)
SELECT p.id, p.active, p.name, p.preferred_name, p.given_name, p.family_name, p.preferred_given_name, p.preferred_family_name, p.honorific_prefix, p.email, p.roles, p.created_at, p.updated_at, json_agg(json_build_object('type', i.type, 'value', i.value)) AS identifiers
FROM people p, identifiers i WHERE p.id = i.person_id
GROUP BY p.id
`

type GetPersonByIdentifierParams struct {
	Type  string
	Value string
}

type GetPersonByIdentifierRow struct {
	ID                  int64
	Active              bool
	Name                string
	PreferredName       pgtype.Text
	GivenName           pgtype.Text
	FamilyName          pgtype.Text
	PreferredGivenName  pgtype.Text
	PreferredFamilyName pgtype.Text
	HonorificPrefix     pgtype.Text
	Email               pgtype.Text
	Roles               []string
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	Identifiers         []byte
}

func (q *Queries) GetPersonByIdentifier(ctx context.Context, arg GetPersonByIdentifierParams) (GetPersonByIdentifierRow, error) {
	row := q.db.QueryRow(ctx, getPersonByIdentifier, arg.Type, arg.Value)
	var i GetPersonByIdentifierRow
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.Name,
		&i.PreferredName,
		&i.GivenName,
		&i.FamilyName,
		&i.PreferredGivenName,
		&i.PreferredFamilyName,
		&i.HonorificPrefix,
		&i.Email,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Identifiers,
	)
	return i, err
}

const movePersonIdentifier = `-- name: MovePersonIdentifier :exec
UPDATE people_identifiers SET person_id = ($3)
WHERE type = $1 AND value = $2
`

type MovePersonIdentifierParams struct {
	Type     string
	Value    string
	PersonID int64
}

func (q *Queries) MovePersonIdentifier(ctx context.Context, arg MovePersonIdentifierParams) error {
	_, err := q.db.Exec(ctx, movePersonIdentifier, arg.Type, arg.Value, arg.PersonID)
	return err
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE people SET (
  active,
  name,
  preferred_name,
  given_name,
  family_name,
  preferred_given_name,
  preferred_family_name,
  honorific_prefix,
  email,
  updated_at
) = ($2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
WHERE id = $1
`

type UpdatePersonParams struct {
	ID                  int64
	Active              bool
	Name                string
	PreferredName       pgtype.Text
	GivenName           pgtype.Text
	FamilyName          pgtype.Text
	PreferredGivenName  pgtype.Text
	PreferredFamilyName pgtype.Text
	HonorificPrefix     pgtype.Text
	Email               pgtype.Text
	UpdatedAt           pgtype.Timestamptz
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.Exec(ctx, updatePerson,
		arg.ID,
		arg.Active,
		arg.Name,
		arg.PreferredName,
		arg.GivenName,
		arg.FamilyName,
		arg.PreferredGivenName,
		arg.PreferredFamilyName,
		arg.HonorificPrefix,
		arg.Email,
		arg.UpdatedAt,
	)
	return err
}
