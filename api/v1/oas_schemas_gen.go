// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type ApiKey struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKey) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKey) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Person
type Person struct {
	Active              bool              `json:"active"`
	Name                string            `json:"name"`
	PreferredName       OptString         `json:"preferred_name"`
	GivenName           OptString         `json:"given_name"`
	FamilyName          OptString         `json:"family_name"`
	PreferredGivenName  OptString         `json:"preferred_given_name"`
	PreferredFamilyName OptString         `json:"preferred_family_name"`
	HonorificPrefix     OptString         `json:"honorific_prefix"`
	Email               OptString         `json:"email"`
	Identifiers         PersonIdentifiers `json:"identifiers"`
}

// GetActive returns the value of Active.
func (s *Person) GetActive() bool {
	return s.Active
}

// GetName returns the value of Name.
func (s *Person) GetName() string {
	return s.Name
}

// GetPreferredName returns the value of PreferredName.
func (s *Person) GetPreferredName() OptString {
	return s.PreferredName
}

// GetGivenName returns the value of GivenName.
func (s *Person) GetGivenName() OptString {
	return s.GivenName
}

// GetFamilyName returns the value of FamilyName.
func (s *Person) GetFamilyName() OptString {
	return s.FamilyName
}

// GetPreferredGivenName returns the value of PreferredGivenName.
func (s *Person) GetPreferredGivenName() OptString {
	return s.PreferredGivenName
}

// GetPreferredFamilyName returns the value of PreferredFamilyName.
func (s *Person) GetPreferredFamilyName() OptString {
	return s.PreferredFamilyName
}

// GetHonorificPrefix returns the value of HonorificPrefix.
func (s *Person) GetHonorificPrefix() OptString {
	return s.HonorificPrefix
}

// GetEmail returns the value of Email.
func (s *Person) GetEmail() OptString {
	return s.Email
}

// GetIdentifiers returns the value of Identifiers.
func (s *Person) GetIdentifiers() PersonIdentifiers {
	return s.Identifiers
}

// SetActive sets the value of Active.
func (s *Person) SetActive(val bool) {
	s.Active = val
}

// SetName sets the value of Name.
func (s *Person) SetName(val string) {
	s.Name = val
}

// SetPreferredName sets the value of PreferredName.
func (s *Person) SetPreferredName(val OptString) {
	s.PreferredName = val
}

// SetGivenName sets the value of GivenName.
func (s *Person) SetGivenName(val OptString) {
	s.GivenName = val
}

// SetFamilyName sets the value of FamilyName.
func (s *Person) SetFamilyName(val OptString) {
	s.FamilyName = val
}

// SetPreferredGivenName sets the value of PreferredGivenName.
func (s *Person) SetPreferredGivenName(val OptString) {
	s.PreferredGivenName = val
}

// SetPreferredFamilyName sets the value of PreferredFamilyName.
func (s *Person) SetPreferredFamilyName(val OptString) {
	s.PreferredFamilyName = val
}

// SetHonorificPrefix sets the value of HonorificPrefix.
func (s *Person) SetHonorificPrefix(val OptString) {
	s.HonorificPrefix = val
}

// SetEmail sets the value of Email.
func (s *Person) SetEmail(val OptString) {
	s.Email = val
}

// SetIdentifiers sets the value of Identifiers.
func (s *Person) SetIdentifiers(val PersonIdentifiers) {
	s.Identifiers = val
}

type PersonIdentifiers map[string][]string

func (s *PersonIdentifiers) init() PersonIdentifiers {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}
